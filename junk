import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

public class PasswordResetThrottling {

  // Define the time frame and the maximum number of attempts allowed within that time frame.
  private static final long THROTTLE_TIME_FRAME_MINUTES = 5;
  private static final int MAX_PASSWORD_RESET_ATTEMPTS = 3;

  private Map<String, LoginAttemptDetails> userLoginDetailsMap = new HashMap<>();

  public void resetPassword(String user) throws Exception {
    long currentTimeMillis = System.currentTimeMillis();

    // Check if the user exists in the map.
    LoginAttemptDetails loginAttemptDetails = userLoginDetailsMap.get(user);

    if (loginAttemptDetails == null) {
      // If the user does not exist in the map, create a new entry with attemptCounter set to 1 and LastPasswordResetTime set to the current time.
      loginAttemptDetails = new LoginAttemptDetails(1, currentTimeMillis);
      userLoginDetailsMap.put(user, loginAttemptDetails);
    } else {
      // If the user exists in the map, increment the attemptCounter and update the LastPasswordResetTime to the current time.
      loginAttemptDetails.setAttemptCounter(loginAttemptDetails.getAttemptCounter() + 1);
      loginAttemptDetails.setLastPasswordResetTime(currentTimeMillis);
    }

    // Check if the time frame has elapsed since the last password reset attempt.
    if (currentTimeMillis - loginAttemptDetails.getLastPasswordResetTime() > TimeUnit.MINUTES.toMillis(THROTTLE_TIME_FRAME_MINUTES)) {
      // If the time frame has elapsed, reset the attemptCounter and LastPasswordResetTime.
      loginAttemptDetails.setAttemptCounter(1);
      loginAttemptDetails.setLastPasswordResetTime(currentTimeMillis);
    }

    // Check if the maximum number of password reset attempts has been reached within the time frame.
    if (loginAttemptDetails.getAttemptCounter() > MAX_PASSWORD_RESET_ATTEMPTS) {
      // If the maximum number of password reset attempts has been reached, throw an exception.
      throw new Exception("You have exceeded the maximum number of password reset attempts. Please try again later.");
    }

    // Perform the password reset.
    // ...
  }

  private static class LoginAttemptDetails {
    private int attemptCounter;
    private long lastPasswordResetTime;

    public LoginAttemptDetails(int attemptCounter, long lastPasswordResetTime) {
      this.attemptCounter = attemptCounter;
      this.lastPasswordResetTime = lastPasswordResetTime;
    }

    public int getAttemptCounter() {
      return attemptCounter;
    }

    public void setAttemptCounter(int attemptCounter) {
      this.attemptCounter = attemptCounter;
    }

    public long getLastPasswordResetTime() {
      return lastPasswordResetTime;
    }

    public void setLastPasswordResetTime(long lastPasswordResetTime) {
      this.lastPasswordResetTime = lastPasswordResetTime;
    }
  }

}
