import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class WordReplacement {
    public static void main(String[] args) throws IOException {
        String directory = args[0];
        String[] fileExtensions = args[1].split(",");
        String wordToReplace = args[2];
        String newWord = args[3];
        String skipWord = args[4];
        String skipSubfolder = args[5];
        int count = 0;

        List<File> files = getFiles(directory, fileExtensions, skipSubfolder);
        for (File file : files) {
            String fileContent = readFile(file);
            if (fileContent.contains(wordToReplace)) {
                String newContent = replaceWord(fileContent, wordToReplace, newWord, skipWord);
                writeFile(file, newContent);
                count++;
            }
        }
        System.out.println("Number of files updated: " + count);
    }

    private static List<File> getFiles(String directory, String[] fileExtensions, String skipSubfolder) {
        List<File> files = new ArrayList<>();
        File folder = new File(directory);
        File[] listOfFiles = folder.listFiles();

        for (File file : listOfFiles) {
            if (file.isFile()) {
                for (String extension : fileExtensions) {
                    if (file.getName().endsWith(extension)) {
                        files.add(file);
                    }
                }
            } else if (file.isDirectory() && !file.getName().equals(skipSubfolder)) {
                files.addAll(getFiles(file.getAbsolutePath(), fileExtensions, skipSubfolder));
            }
        }
        return files;
    }

    private static String readFile(File file) throws FileNotFoundException {
        Scanner scanner = new Scanner(file);
        String content = scanner.useDelimiter("\\Z").next();
        scanner.close();
        return content;
    }

    private static String replaceWord(String content, String wordToReplace, String newWord, String skipWord) {
        Pattern pattern = Pattern.compile("(?<!\\S)" + wordToReplace + "(?!\\S)");
        Matcher matcher = pattern.matcher(content);
        String newContent = matcher.replaceAll(newWord);
        newContent = newContent.replaceAll("(?m)^" + skipWord + "$", skipWord);
        return newContent;
    }

    private static void writeFile(File file, String content) throws IOException {
        Path path = Paths.get(file.getAbsolutePath());
        Files.write(path, content.getBytes());
    }
}











##########


import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class WordReplacement {

    public static void main(String[] args) throws IOException {
        String directory = args[0];
        String[] fileExtensions = args[1].split(",");
        String wordToReplace = args[2];
        String newWord = args[3];
        String skipWord = args[4];
        String skipSubfolder = args[5];

        List<Path> files = getFiles(directory, fileExtensions, skipSubfolder);
        int count = 0;

        for (Path file : files) {
            List<String> content = Files.readAllLines(file);
            List<String> newContent = new ArrayList<>();
            for (String line : content) {
                if (!line.contains(skipWord)) {
                    line = line.replace(wordToReplace, newWord);
                }
                newContent.add(line);
            }
            if (!newContent.isEmpty()) {
                newContent.remove(newContent.size() - 1);
                Files.write(file, newContent.stream().collect(Collectors.joining("\n")).getBytes());
                count++;
            }
        }
        System.out.println("Number of files updated: " + count);
    }

    private static List<Path> getFiles(String directory, String[] fileExtensions, String skipSubfolder) throws IOException {
        return Files.walk(Paths.get(directory))
                .filter(Files::isRegularFile)
                .filter(path -> {
                    for (String extension : fileExtensions) {
                        if (path.toString().endsWith(extension)) {
                            return true;
                        }
                    }
                    return false;
                })
                .filter(path -> !path.toString().contains(skipSubfolder))
                .collect(Collectors.toList());
    }
}
